{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"todoContainer\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Vue Todo-List\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"todoItemContainer\"\n};\nconst _hoisted_4 = [\"onClick\", \"checked\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_InputContainer = _resolveComponent(\"InputContainer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_InputContainer, {\n    onAddBtnClick: $options.addTodo\n  }, null, 8 /* PROPS */, [\"onAddBtnClick\"]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.todo, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: \"todoItem\",\n      key: item.id\n    }, [_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      name: \"check\",\n      id: \"check\",\n      onClick: $event => $options.checkedTodo(item.id),\n      checked: item.checked\n    }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"h3\", {\n      class: _normalizeClass({\n        'finishText': item.checked\n      })\n    }, _toDisplayString(item.text), 3 /* TEXT, CLASS */), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteTodo(item.id)\n    }, \" X \", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAe;gCACxBC,oBAAsB,YAAlB,eAAa;;EAEZD,KAAK,EAAC;AAAmB;;;;;uBAHhCE,oBAUM,OAVNC,UAUM,GATJC,UAAsB,EACtBC,aAAwCC;IAAvBC,aAAW,EAAEC;EAAO,4CACrCP,oBAMQ,OANRQ,UAMQ,sBALJP,oBAIKQ,6BAJ+BC,SAAI,EAAZC,IAAI;yBAAhCV,oBAIK;MAJDF,KAAK,EAAC,UAAU;MAAuBa,GAAG,EAAED,IAAI,CAACE;QACnDb,oBAAgH;MAAzGc,IAAI,EAAC,UAAU;MAACC,IAAI,EAAC,OAAO;MAACF,EAAE,EAAC,OAAO;MAAMG,OAAK,YAAET,oBAAW,CAACI,IAAI,CAACE,EAAE;MAAUI,OAAO,EAAEN,IAAI,CAACM;yCACtGjB,oBAAqE;MAA1DD,KAAK;QAAA,cAAiBY,IAAI,CAACM;MAAO;wBAAON,IAAI,CAACO,IAAI,yBAC7DlB,oBAAqD;MAAxCgB,OAAK,YAAET,mBAAU,CAACI,IAAI,CAACE,EAAE;OAAG,KAAG","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_InputContainer","onAddBtnClick","$options","_hoisted_3","_Fragment","_ctx","item","key","id","type","name","onClick","checked","text"],"sourceRoot":"","sources":["/Users/jeong-yongseong/Desktop/VUE-INTERMEDIATE/vue-todo-test/src/components/TodoContainer.vue"],"sourcesContent":["<template>\n    <div class=\"todoContainer\">\n      <h1>Vue Todo-List</h1>\n      <InputContainer @addBtnClick=\"addTodo\"/>\n      <div class=\"todoItemContainer\">\n          <li class=\"todoItem\" v-for=\"item in todo\" :key=\"item.id\">\n            <input type=\"checkbox\" name=\"check\" id=\"check\" v-on:click=\"checkedTodo(item.id)\" v-bind:checked=\"item.checked\"/>\n            <h3 v-bind:class=\"{'finishText': item.checked}\" >{{ item.text }}</h3>\n            <button v-on:click=\"deleteTodo(item.id)\"> X </button>\n          </li>\n        </div>\n    </div>\n  </template>\n  \n  <script>\nimport InputContainer from './InputContainer.vue';\n\n  export default {\n    components: {\n        InputContainer\n    },\n    data: function() {\n      return {\n        todo: [\n          {\n            id: 1,\n            text: '뷰 공부하기', \n            checked: false,\n          },\n          {\n            id: 2,\n            text: '넉스트 알아보기',\n            checked: false,\n          },\n        ]\n      }\n    },\n    methods: {\n      addTodo(text) {\n        if(this.todo.find(item => item.text === text) !== undefined) {\n          return alert('이미 목록에 있습니다.')\n        }\n        this.todo.push({\n          id: this.todo.length + 1,\n          text: text,\n          checked: false\n        })\n        this.text = '';\n      },\n      deleteTodo: function(id) {\n        this.todo = this.todo.filter(item => item.id !== id)\n      },\n      checkedTodo: function(id) {\n        const todoList = [...this.todo];\n        const todoItem = todoList.find(item => item.id === id);\n  \n        if(todoItem) {\n          todoItem.checked = !todoItem.checked\n          this.todo = todoList\n        }\n      }\n    },\n    computed: {\n      checkedText: function() {\n        return this.todo.checked ? 'finishText' : null;\n      }\n    }\n  }\n  </script>\n  \n  <style>\n    * {\n      box-sizing: border-box;\n    }\n  \n    .todoContainer {\n      display: flex;\n      position: relative;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      width: 350px;\n      margin: 0 auto;\n    }\n    \n    .inputContainer, .todoItemContainer {\n      display: flex;\n      position: relative;\n      align-items: center;\n      justify-content: space-between;\n      width: 100%;\n    }\n  \n    .todoItemContainer {\n      flex-direction: column;\n      margin-top: 10px;\n    }\n  \n    .inputContainer > input {\n      width: 100%;\n      height: 40px;\n      border: 1px solid #c9c9c9;\n      padding-left: 10px;\n    }\n  \n    .inputContainer > button {\n      position: absolute;\n      right: 15px;\n      width: 30px;\n      height: 30px;\n      background: white;\n      border: none;\n      cursor: pointer;\n    }\n  \n    li {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      width: 100%;\n      list-style: none;\n    }\n  \n    li > input[type=\"checkbox\"] {\n      width: 25px;\n      height: 25px;\n      border: 1px solid #c9c9c9;\n      margin: 0;\n    }\n  \n    li > button {\n      width: 25px;\n      height: 25px;\n      background: white;\n      border: 1px solid #c9c9c9;\n      border-radius: 4px;\n    }\n  \n    .finishText {\n      color:red;\n    }\n  </style>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}